[gd_scene load_steps=12 format=2]

[ext_resource path="res://game/disco/minigames/cocktail_bar/Game_Background-BAR.png" type="Texture" id=1]
[ext_resource path="res://fonts/Indie_Flower/IndieFlower-Regular.ttf" type="DynamicFontData" id=2]
[ext_resource path="res://game/credits/Credits.gd" type="Script" id=3]
[ext_resource path="res://game/disco/disco_overview/DiscoLight.gd" type="Script" id=4]
[ext_resource path="res://game/ui/MenuButton.tscn" type="PackedScene" id=5]

[sub_resource type="Shader" id=15]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;


uniform vec2 position = vec2(0.3);
uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform float speed = 1.0;
uniform float ray1_offset = 1.3;
uniform float ray2_offset = 2.4;
uniform float ray3_offset = 2.6;
uniform float ray4_offset = 3.1;


mat2 rotate(float _angle) {
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend) {
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment() {
	float rotation = TIME * speed / 2.0;
	float angle_ray1 = mod(ray1_offset + rotation, 3.14159);
	float angle_ray2 = mod(ray2_offset + rotation, 3.14159);
	float angle_ray3 = mod(ray3_offset + rotation, 3.14159);
	float angle_ray4 = mod(ray4_offset + rotation, 3.14159);
	
	vec2 offset = UV - position;
	float angle_current = acos((offset / length(offset)).x);
	
	
	float dist = abs(angle_ray1 - angle_current);
	dist = min(dist, abs(angle_ray2 - angle_current));
	dist = min(dist, abs(angle_ray3 - angle_current));
	dist = min(dist, abs(angle_ray4 - angle_current));
	
	if (dist > 3.14159 / 2.0) {
		dist = 3.14159 - dist;
	}
	
	vec3 shine = dist * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, 0.1 - dist * dist * 120.0);
	//COLOR.a = 0.5;
	
	
}"

[sub_resource type="ShaderMaterial" id=19]
shader = SubResource( 15 )
shader_param/position = Vector2( 0, 0 )
shader_param/color = Color( 1, 0.62, 0.626333, 0.8 )
shader_param/speed = 2.0
shader_param/ray1_offset = 1.3
shader_param/ray2_offset = 2.4
shader_param/ray3_offset = 2.6
shader_param/ray4_offset = 3.1

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;


uniform vec2 position = vec2(0.3);
uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform float speed = 1.0;
uniform float ray1_offset = 1.3;
uniform float ray2_offset = 2.4;
uniform float ray3_offset = 2.6;
uniform float ray4_offset = 3.1;


mat2 rotate(float _angle) {
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend) {
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment() {
	float rotation = TIME * speed / 2.0;
	float angle_ray1 = mod(ray1_offset + rotation, 3.14159);
	float angle_ray2 = mod(ray2_offset + rotation, 3.14159);
	float angle_ray3 = mod(ray3_offset + rotation, 3.14159);
	float angle_ray4 = mod(ray4_offset + rotation, 3.14159);
	
	vec2 offset = UV - position;
	float angle_current = acos((offset / length(offset)).x);
	
	
	float dist = abs(angle_ray1 - angle_current);
	dist = min(dist, abs(angle_ray2 - angle_current));
	dist = min(dist, abs(angle_ray3 - angle_current));
	dist = min(dist, abs(angle_ray4 - angle_current));
	
	if (dist > 3.14159 / 2.0) {
		dist = 3.14159 - dist;
	}
	
	vec3 shine = dist * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, 0.1 - dist * dist * 120.0);
	//COLOR.a = 0.5;
	
	
}"

[sub_resource type="ShaderMaterial" id=20]
shader = SubResource( 1 )
shader_param/position = Vector2( 1, 0 )
shader_param/color = Color( 0, 0.811765, 1, 1 )
shader_param/speed = -1.0
shader_param/ray1_offset = 1.3
shader_param/ray2_offset = 2.4
shader_param/ray3_offset = 2.6
shader_param/ray4_offset = 3.1

[sub_resource type="ShaderMaterial" id=21]
shader = SubResource( 1 )
shader_param/position = Vector2( 0.8, 0.3 )
shader_param/color = Color( 1, 0.560784, 0, 0.941176 )
shader_param/speed = 2.0
shader_param/ray1_offset = 1.3
shader_param/ray2_offset = 2.4
shader_param/ray3_offset = 2.6
shader_param/ray4_offset = 3.1

[sub_resource type="DynamicFont" id=18]
size = 40
outline_size = 3
outline_color = Color( 0, 0, 0, 1 )
font_data = ExtResource( 2 )

[node name="Credits" type="Node2D"]
script = ExtResource( 3 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = -1

[node name="Background" type="TextureRect" parent="CanvasLayer"]
modulate = Color( 0.76, 1, 0.799464, 1 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 1 )
expand = true
stretch_mode = 7
__meta__ = {
"_edit_use_anchors_": false
}

[node name="DiscoLights" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 19 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 0.192157, 0.192157, 0.192157, 1 )
script = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="DiscoLights2" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 20 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 0.192157, 0.192157, 0.192157, 1 )
script = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="DiscoLights3" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 21 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 0.192157, 0.192157, 0.192157, 1 )
script = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MenuButton" parent="CanvasLayer" instance=ExtResource( 5 )]
margin_right = -924.0
margin_bottom = -550.0
rect_min_size = Vector2( 100, 50 )

[node name="Credits" type="CanvasLayer" parent="."]

[node name="Thanks" type="Label" parent="Credits"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -206.0
margin_top = -29.5
margin_right = 206.0
margin_bottom = 29.5
grow_horizontal = 2
grow_vertical = 2
custom_fonts/font = SubResource( 18 )
text = "Thank you for raving! <3"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Authors" type="Label" parent="Credits"]
modulate = Color( 1, 1, 1, 0 )
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -203.5
margin_top = -246.5
margin_right = 203.5
margin_bottom = 246.5
grow_horizontal = 2
grow_vertical = 2
custom_fonts/font = SubResource( 18 )
text = "Game Off 2021 entry by:
L N
Benjamin
Dardan
Däster
Michèle
Stefan
Stephanie"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Code" type="Label" parent="Credits"]
modulate = Color( 1, 1, 1, 0 )
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -378.0
margin_top = -246.0
margin_right = 378.0
margin_bottom = 247.0
grow_horizontal = 2
grow_vertical = 2
custom_fonts/font = SubResource( 18 )
text = "Code available at

https://github.com/dardanbujupaj/gameoff-2021"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Tween" type="Tween" parent="."]

[connection signal="mouse_entered" from="CanvasLayer/MenuButton" to="." method="_on_MenuButton_mouse_entered"]
[connection signal="pressed" from="CanvasLayer/MenuButton" to="." method="_on_MenuButton_pressed"]
